// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QA1_SYSTEM.Data;

#nullable disable

namespace QA1_SYSTEM.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231202024324_addpicPCeqp")]
    partial class addpicPCeqp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QA1_SYSTEM.Models.ComputerHistory", b =>
                {
                    b.Property<int>("CompHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompHistoryId"));

                    b.Property<int>("ComputerId")
                        .HasColumnType("int");

                    b.Property<string>("remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("trouble_date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("trouble_encounter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompHistoryId");

                    b.HasIndex("ComputerId");

                    b.ToTable("ComputerHistory");
                });

            modelBuilder.Entity("QA1_SYSTEM.Models.Computers", b =>
                {
                    b.Property<int>("ComputerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComputerId"));

                    b.Property<string>("active_user")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("computer_category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("date_reg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("hdd_capacty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ip_local")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ip_sdp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("os_installed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("path_pic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("processor_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ram_capacity")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ComputerId");

                    b.ToTable("Computers");
                });

            modelBuilder.Entity("QA1_SYSTEM.Models.Consumables", b =>
                {
                    b.Property<int>("ConsumbleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsumbleId"));

                    b.Property<string>("consum_qty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("date_reg")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("item_category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("item_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("item_picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("item_remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("item_unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("maker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("part_number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("safety_qty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supplier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("total_price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("total_qty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("unit_price")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConsumbleId");

                    b.ToTable("Consumables");
                });

            modelBuilder.Entity("QA1_SYSTEM.Models.EquipmentMachine", b =>
                {
                    b.Property<int>("EQPid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EQPid"));

                    b.Property<string>("active_user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("date_reg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("equipment_category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("machine_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("part_number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("path_pic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EQPid");

                    b.ToTable("EquipmentMachine");
                });

            modelBuilder.Entity("QA1_SYSTEM.Models.EquipmentMachineHistory", b =>
                {
                    b.Property<int>("EqpMacId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EqpMacId"));

                    b.Property<int>("EQPid")
                        .HasColumnType("int");

                    b.Property<string>("remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("trouble_date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("trouble_encounter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EqpMacId");

                    b.HasIndex("EQPid");

                    b.ToTable("EquipmentMachineHistory");
                });

            modelBuilder.Entity("QA1_SYSTEM.Models.FixedAssetEQP", b =>
                {
                    b.Property<int>("EQPassetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EQPassetId"));

                    b.Property<int>("EQPid")
                        .HasColumnType("int");

                    b.Property<string>("fixed_asset_date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fixed_asset_no")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("inventory_date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("inventory_found")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("inventory_year")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("item_location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pic_path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EQPassetId");

                    b.HasIndex("EQPid");

                    b.ToTable("FixedAssetEQP");
                });

            modelBuilder.Entity("QA1_SYSTEM.Models.FixedAssetPC", b =>
                {
                    b.Property<int>("FixedAssetPCId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FixedAssetPCId"));

                    b.Property<int>("ComputerId")
                        .HasColumnType("int");

                    b.Property<string>("fixed_asset_date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fixed_asset_no")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("inventory_date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("inventory_found")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("inventory_year")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("item_location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pic_path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FixedAssetPCId");

                    b.HasIndex("ComputerId");

                    b.ToTable("FixedAssetPC");
                });

            modelBuilder.Entity("QA1_SYSTEM.Models.Purchasing", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("date_needed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("date_received")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("date_request")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("date_submitPR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("est_time_arrival")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("item_comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("item_currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("item_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("maker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("part_number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("person_submitPR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("po_path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pr_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pr_path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("purchase_dept")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("purchase_order")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("received_qty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("request_qty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("request_reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("request_status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("request_unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supplier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("total_price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("unit_price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Purchasing");
                });

            modelBuilder.Entity("QA1_SYSTEM.Models.Requestor", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<int>("ConsumbleId")
                        .HasColumnType("int");

                    b.Property<string>("item_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("part_number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("reason_request")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("request_ate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("request_qty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("requestor_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestId");

                    b.HasIndex("ConsumbleId");

                    b.ToTable("Requestor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QA1_SYSTEM.Models.ComputerHistory", b =>
                {
                    b.HasOne("QA1_SYSTEM.Models.Computers", "Computers")
                        .WithMany("ComputerHistory")
                        .HasForeignKey("ComputerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Computers");
                });

            modelBuilder.Entity("QA1_SYSTEM.Models.EquipmentMachineHistory", b =>
                {
                    b.HasOne("QA1_SYSTEM.Models.EquipmentMachine", "EquipmentMachine")
                        .WithMany("equipmentMachineHistory")
                        .HasForeignKey("EQPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipmentMachine");
                });

            modelBuilder.Entity("QA1_SYSTEM.Models.FixedAssetEQP", b =>
                {
                    b.HasOne("QA1_SYSTEM.Models.EquipmentMachine", "EquipmentMachine")
                        .WithMany("fixedAssetEQP")
                        .HasForeignKey("EQPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipmentMachine");
                });

            modelBuilder.Entity("QA1_SYSTEM.Models.FixedAssetPC", b =>
                {
                    b.HasOne("QA1_SYSTEM.Models.Computers", "Computers")
                        .WithMany("FixedAssetPC")
                        .HasForeignKey("ComputerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Computers");
                });

            modelBuilder.Entity("QA1_SYSTEM.Models.Requestor", b =>
                {
                    b.HasOne("QA1_SYSTEM.Models.Consumables", "Consumables")
                        .WithMany("Requestor")
                        .HasForeignKey("ConsumbleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consumables");
                });

            modelBuilder.Entity("QA1_SYSTEM.Models.Computers", b =>
                {
                    b.Navigation("ComputerHistory");

                    b.Navigation("FixedAssetPC");
                });

            modelBuilder.Entity("QA1_SYSTEM.Models.Consumables", b =>
                {
                    b.Navigation("Requestor");
                });

            modelBuilder.Entity("QA1_SYSTEM.Models.EquipmentMachine", b =>
                {
                    b.Navigation("equipmentMachineHistory");

                    b.Navigation("fixedAssetEQP");
                });
#pragma warning restore 612, 618
        }
    }
}
